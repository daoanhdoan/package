<?php
namespace Drupal\package\Form;

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Extension\Extension;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

class ExtensionConfigForm extends ConfigFormBase {
  public function __construct(ConfigFactoryInterface $config_factory)
  {
    parent::__construct($config_factory);
  }

  public function buildForm(array $form, FormStateInterface $form_state)
  {
    $extensions = \Drupal::service('extension.list.module')->getList();
    /**
     * @var  $name
     * @var Extension $extension
     */
    foreach($extensions as $name => $extension) {
      if (preg_match("/custom/", $extension->getPath())) {
        $options[$name] = [
          'select' => ['#type' => 'checkbox', '#attributes' => ['class' => ['package-select-item']]],
          'id' => ['#markup' => $extension->getName()],
          'name' => ['#markup' => $extension->info['name']],
          'description' => ['#markup' => $extension->info['description']],
          'type' => ['#markup' => $extension->getType()],
          'path' => ['#markup' => $extension->getPath()]
        ];
      }
    }
    $header = array(
      'select' => ['data' => "", 'class' => ['package-select-all']],
      'id' => t('ID'),
      'name' => t('Name'),
      'description' => t('Description'),
      'type' => t('Type'),
      'path' => t('Path')
    );

    $form['extensions'] = array(
      '#type' => 'table',
      '#header' => $header,
      '#empty' => t('No content available.'),
      '#tree' => TRUE,
      '#attached' => ['library' => ['package/package']]
    );
    $form['extensions']  += $options;
    $form += parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
    $form['actions']['create_composer'] = [
      '#type' => 'submit',
      '#value' => $this->t('Create Composer File'),
      '#button_type' => 'primary',
      '#submit' => [[$this, "createComposerFile"]]
    ];
    $form['actions']['create_repository'] = [
      '#type' => 'submit',
      '#value' => $this->t('Create Github Repository'),
      '#button_type' => 'primary',
      '#submit' => [[$this, "createRepository"]]
    ];
    $form['actions']['delete_repository'] = [
      '#type' => 'submit',
      '#value' => $this->t('Delete Github Repository'),
      '#button_type' => 'danger',
      '#submit' => [[$this, "deleteRepository"]]
    ];
    return $form;
  }

  public function createComposerFile(array &$form, FormStateInterface $formState) {
    $config = \Drupal::config('package.settings');
    $vendor = $config->get('vendor');
    $extensionList = \Drupal::service('extension.list.module')->getList();
    $extensions = $formState->getValue('extensions');
    foreach($extensions as $name => $extension) {
      if ($extension['select']) {
        $extension = $extensionList[$name];
        $desc = !empty($extension->info['description']) ? " - {$extension->info['description']}":"";
        $json = "{\n  \"name\": \"{$vendor}/{$extension->getName()}\",\n  \"description\": \"{$extension->info['name']}{$desc}\",\n \"type\": \"drupal-custom-module\",\n  \"license\":\"GPL-2.0\",\n  \"extra\": {\n    \"installer-name\": \"{$extension->getName()}\"\n  }\n}";
        file_put_contents($extension->getPath() . "/composer.json", $json);
        \Drupal::messenger()->addStatus(t("The composer.json file has been created successful in path !path of module !name", ['!path' => $extension->getPath(), '!name' => $extension->getName()]));
      }
    }
  }

  public function createRepository($form, FormStateInterface $formState) {
    $extensionList = \Drupal::service('extension.list.module')->getList();
    $extensions = $formState->getValue('extensions');
    $factory = \Drupal::service('authman.oauth');
    $authmanInstance = $factory->get('github');
    $messages = [];
    foreach($extensions as $name => $extension) {
      if ($extension['select']) {
        $extension = $extensionList[$name];
        $desc = !empty($extension->info['description']) ? " - {$extension->info['description']}":"";
        try {
          $repo = (object)[
            'name' => $extension->getName(),
            'description' => "{$extension->info['name']}{$desc}",
            'private' => FALSE,
            'visibility' => 'public'
          ];
          $response = $authmanInstance->authenticatedRequest('POST', 'https://api.github.com/user/repos', ['body' => json_encode($repo)]);
          $repoJson = \json_decode((string)$response->getBody());
          $messages[] = $repoJson->full_name;
        } catch (\GuzzleHttp\Exception\GuzzleException $e) {
          $errorJson = \json_decode((string)$e->getResponse()->getBody());
          \Drupal::messenger()->addError($errorJson->message);
        }
      }
    }
    \Drupal::messenger()->addStatus(t('%count repositories have been created successful. List: %list', ['%count' => count($messages), '%list' => implode(", ", $messages)]));
  }

  public function deleteRepository($form, FormStateInterface $formState) {
    $config = \Drupal::config('package.settings');
    $vendor = $config->get('vendor');
    $extensionList = \Drupal::service('extension.list.module')->getList();
    $extensions = $formState->getValue('extensions');
    $factory = \Drupal::service('authman.oauth');
    $authmanInstance = $factory->get('github');
    $messages = [];
    foreach($extensions as $name => $extension) {
      if ($extension['select']) {
        $extension = $extensionList[$name];
        try {
          $response = $authmanInstance->authenticatedRequest('DELETE', 'https://api.github.com/repos' . "/{$vendor}/{$extension->getName()}");
          $messages[] = "/{$vendor}/{$extension->getName()}";
        } catch (\GuzzleHttp\Exception\GuzzleException $e) {
          $errorJson = \json_decode((string)$e->getResponse()->getBody());
          \Drupal::messenger()->addError($errorJson->message);
        }
      }
    }
    \Drupal::messenger()->addStatus(t('%count repositories have been deleted successful. List: %list', ['%count' => count($messages), '%list' => implode(", ", $messages)]));
  }

  /**
   * @inheritDoc
   */
  protected function getEditableConfigNames()
  {
    return ["package.extensions"];
  }

  /**
   * @inheritDoc
   */
  public function getFormId()
  {
    return "package_extensions";
  }
}
